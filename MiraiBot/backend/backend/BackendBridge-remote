#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from backend import BackendBridge
from backend.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  string ping(string data)')
    print('  string operate(string operate)')
    print('  string getAboutInfo()')
    print('  i32 getBackendVersionCode()')
    print('  string parseCaptchaFromFile(string path)')
    print('  string parseCaptchaFromBinary(string data)')
    print('  string classificateTextMessage(string text)')
    print('  string ocrFromFile(string path)')
    print('  string ocrFromBinary(string data)')
    print('  string scanQrCodeFromFile(string path)')
    print('  string scanQrCodeFromBinary(string data)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = BackendBridge.Client(protocol)
transport.open()

if cmd == 'ping':
    if len(args) != 1:
        print('ping requires 1 args')
        sys.exit(1)
    pp.pprint(client.ping(args[0],))

elif cmd == 'operate':
    if len(args) != 1:
        print('operate requires 1 args')
        sys.exit(1)
    pp.pprint(client.operate(args[0],))

elif cmd == 'getAboutInfo':
    if len(args) != 0:
        print('getAboutInfo requires 0 args')
        sys.exit(1)
    pp.pprint(client.getAboutInfo())

elif cmd == 'getBackendVersionCode':
    if len(args) != 0:
        print('getBackendVersionCode requires 0 args')
        sys.exit(1)
    pp.pprint(client.getBackendVersionCode())

elif cmd == 'parseCaptchaFromFile':
    if len(args) != 1:
        print('parseCaptchaFromFile requires 1 args')
        sys.exit(1)
    pp.pprint(client.parseCaptchaFromFile(args[0],))

elif cmd == 'parseCaptchaFromBinary':
    if len(args) != 1:
        print('parseCaptchaFromBinary requires 1 args')
        sys.exit(1)
    pp.pprint(client.parseCaptchaFromBinary(args[0],))

elif cmd == 'classificateTextMessage':
    if len(args) != 1:
        print('classificateTextMessage requires 1 args')
        sys.exit(1)
    pp.pprint(client.classificateTextMessage(args[0],))

elif cmd == 'ocrFromFile':
    if len(args) != 1:
        print('ocrFromFile requires 1 args')
        sys.exit(1)
    pp.pprint(client.ocrFromFile(args[0],))

elif cmd == 'ocrFromBinary':
    if len(args) != 1:
        print('ocrFromBinary requires 1 args')
        sys.exit(1)
    pp.pprint(client.ocrFromBinary(args[0],))

elif cmd == 'scanQrCodeFromFile':
    if len(args) != 1:
        print('scanQrCodeFromFile requires 1 args')
        sys.exit(1)
    pp.pprint(client.scanQrCodeFromFile(args[0],))

elif cmd == 'scanQrCodeFromBinary':
    if len(args) != 1:
        print('scanQrCodeFromBinary requires 1 args')
        sys.exit(1)
    pp.pprint(client.scanQrCodeFromBinary(args[0],))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
